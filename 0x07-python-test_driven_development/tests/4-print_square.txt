import unittest
from io import StringIO
import sys
from 4-print_square import print_square

class TestPrintSquare(unittest.TestCase):
    def test_module_docstring(self):
        m = __import__("4-print_square").__doc__
        self.assertTrue(len(m) > 1)

    def test_function_docstring(self):
        f = __import__("4-print_square").print_square.__doc__
        self.assertTrue(len(f) > 1)

    def test_no_args(self):
        with self.assertRaises(TypeError):
            print_square()

    def test_too_many_args(self):
        with self.assertRaises(TypeError):
            print_square(1, 2)

    def test_none_arg(self):
        with self.assertRaises(TypeError):
            print_square(None)

    def test_positive_ints(self):
        captured_output = StringIO()
        sys.stdout = captured_output
        print_square(4)
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), "####\n####\n####\n####\n")

        captured_output = StringIO()
        sys.stdout = captured_output
        print_square(10)
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), "##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n")

        # Test for size 0, which should print nothing
        captured_output = StringIO()
        sys.stdout = captured_output
        print_square(0)
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), "")

        # Test for size 1, which should print a single #
        captured_output = StringIO()
        sys.stdout = captured_output
        print_square(1)
        sys.stdout = sys.__stdout__
        self.assertEqual(captured_output.getvalue(), "#\n")

    def test_negative_ints(self):
        with self.assertRaises(ValueError):
            print_square(-1)

    def test_non_number_types(self):
        with self.assertRaises(TypeError):
            print_square((1,))
        with self.assertRaises(TypeError):
            print_square("3")
        with self.assertRaises(TypeError):
            print_square(True)

    def test_non_int_number_types(self):
        with self.assertRaises(TypeError):
            print_square(1.0)
        with self.assertRaises(TypeError):
            print_square(-5.5)

if __name__ == '__main__':
    unittest.main()
